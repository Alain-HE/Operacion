# -*- coding: utf-8 -*-
"""Blaster.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HYGdb1W3MqfEbUgPYBBtkhcM_iOx4Gzn
"""

# Commented out IPython magic to ensure Python compatibility.
# %config IPCompleter.greedy=True
import pandas as pd
import numpy as np
import seaborn as sns
import seaborn as sb
import xlrd
import matplotlib.pyplot as plt
from matplotlib.ticker import PercentFormatter
from tabulate import tabulate

#Acceder a drive
from google.colab import files
from google.colab import drive
drive.mount('/content/drive')

# Acceder al archivo de los resultados del blaster
df = pd.read_excel("/content/drive/MyDrive/Colab Notebooks/reducido1.xlsx")

"""### Agregar nuevos registros"""

archivo_existente = "/content/drive/MyDrive/Colab Notebooks/reducido1.xlsx"
archivo_nuevo = "/content/drive/MyDrive/Colab Notebooks/reducido2.xlsx"

#Dataframe
df_existente = pd.read_excel(archivo_existente)
df_nuevo = pd.read_excel(archivo_nuevo)

df_actualizado = pd.concat([df_existente, df_nuevo], ignore_index=True)
df_actualizado.to_excel(archivo_existente, index=False)

print(f"Los datos del archivo '{archivo_nuevo}' fueron agregados al archivo Excel existente '{archivo_existente}'con éxito.")

"""###Gráficos de resultados (Cantidad de llamadas contestadas y no contestadas)

"""

df = pd.read_excel("/content/drive/MyDrive/Colab Notebooks/reducido1.xlsx")
sns.set(style="whitegrid")

# Crear gráfico de barras
plt.figure(figsize=(8, 5))
sns.countplot(data=df, x='Estado de respuesta', palette="deep")
plt.title('Respuestas')
plt.xlabel('Estado de Respuesta')
plt.ylabel('Cantidad')
plt.xticks(rotation=0)

# Mostrar el gráfico
plt.tight_layout()
plt.show()

"""###Filtro de llamadas contestadas y eliminación de no contestadas"""

# Filtrar
df_answer = df[(df['Estado de respuesta'] == 'ANSWER') & (df['Estado de respuesta'] != 'NO ANSWER')]

# Guardar el DataFrame filtrado en un nuevo archivo Excel
df_answer.to_excel("/content/drive/MyDrive/Colab Notebooks/resultado_blaster_filtrado.xlsx", index=False)

# Imprimir tabla
print(tabulate(df_answer, headers='keys', tablefmt='pretty', showindex=False))

"""###Día y horario con más éxito de llamadas"""

# Acceder al archivo que contienen únicamente las llamadas contestadas
df = pd.read_excel("/content/drive/MyDrive/Colab Notebooks/resultado_blaster_filtrado.xlsx")

df['Fecha y hora respuesta'] = pd.to_datetime(df['Fecha y hora respuesta'])

# Contar y agrupar las llamadas por días de la semana
day_of_week_counts = df_answer['Fecha y hora respuesta'].dt.day_name().value_counts()
max_day = day_of_week_counts.idxmax() # Encontrar el día de la semana con mayor número de llamadas contestadas.

# 7. Calcula la hora con el mayor número de llamadas "ANSWER" en general
hour_counts = df_answer['Fecha y hora respuesta'].dt.hour.value_counts()
max_hour = hour_counts.idxmax()
max_calls_hour = hour_counts.max()

print(f"El día de la semana con mayor éxito de llamadas es {max_day} con {day_of_week_counts[max_day]} llamadas.")
print(f"La mejor hora para llamar en general es a las {max_hour} horas con {max_calls_hour} llamadas contestadas.")